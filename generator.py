import subprocess
from helper import generateBody, inputHandler
def main():
    """
    This is the generator code. It should take in the MF structure and generate the code
    needed to run the query. That generated code should be saved to a 
    file (e.g. _generated.py) and then run.
    """
    phi = inputHandler()
    body = generateBody(phi)
    
    tmp = f"""
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv
from helper import inputHandler, createMFStructEntry, lookup
from collections import defaultdict

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    user = os.getenv('DB_USER')
    password = os.getenv('DB_PASSWORD')
    dbname = os.getenv('DB_NAME')

    conn = psycopg2.connect(
    dbname=dbname, user=user, password=password, host="localhost", port=5433, cursor_factory=psycopg2.extras.DictCursor)
    
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    phi = {phi}

    if 'sigma' in phi.keys():
        original_sigma_list = phi['sigma']
        phi['sigma'] = defaultdict(list)
        for cond in original_sigma_list:
            gv, condition = cond.split('.', 1)
            condition = condition.replace('=', '==') if '==' not in condition else condition
            phi['sigma'][gv].append(condition)

    print(phi)

    MF_Struct = []
    
    {body}
    
    return tabulate.tabulate(MF_Struct,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    """

    # Write the generated code to a file
    open("_generated.py", "w").write(tmp)
    # Execute the generated code
    subprocess.run(["python", "_generated.py"])


if "__main__" == __name__:
    main()