
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv
from helper import inputHandler, createMFStructEntry, lookup
from collections import defaultdict
import re

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    user = os.getenv('DB_USER')
    password = os.getenv('DB_PASSWORD')
    dbname = os.getenv('DB_NAME')

    conn = psycopg2.connect(
    dbname=dbname, user=user, password=password, host="localhost", port=5433, cursor_factory=psycopg2.extras.DictCursor)
    
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    phi = {'s': ['cust', 'prod', '1_min_quant', '2_max_quant', '3_avg_quant'], 'n': 3, 'v': ['cust', 'prod'], 'f': ['1_min_quant', '2_max_quant', '3_avg_quant'], 'sigma': ["1.state='NJ' and 1.quant > 200", "2.state='NY' and 2.quant > 200", "3.state='CT' and 3.quant > 200"]}

    if 'sigma' in phi.keys():
        original_sigma_list = phi['sigma']
        phi['sigma'] = defaultdict(list)

        for cond in original_sigma_list:
            gv, expr = cond.split('.', 1)
            # Remove all gv prefixes like "1." â†’ "cust", "quant"
            expr = re.sub(r'(?<!\w)(\d+)\.', '', expr)

            print(expr)
            # Normalize single '=' to '==', but don't change >=, <=, !=, ==
            expr = re.sub(r'(?<![<>=!])=(?![=])', '==', expr)

            # Lowercase all standalone ANDs
            expr = re.sub(r'AND', 'and', expr, flags=re.IGNORECASE)

            # Append cleaned expression
            phi['sigma'][gv].append(expr.strip())

    print(phi)

    MF_Struct = []
    
    
    for row in cur:
        # create a tuple of current row's grouping attribute values
        grouping_key = tuple(row[attr] for attr in phi['v'])

        # search MF_Struct to see if grouping_key already exists
        search_index = lookup(MF_Struct, phi['v'], grouping_key)

        # if it does not exist, create an entry in MF_Struct list
        if search_index == -1:
          
            new_entry = createMFStructEntry(phi, row)
            MF_Struct.append(new_entry)

        # if it already exists, update aggregates based on attribute values
        else:
            for s in phi['f']:
                parts = s.split('_')

                if len(parts) == 3:
                    gv, agg, attr = parts
                elif len(parts) == 2:
                    gv = ''
                    agg, attr = parts
                else:
                    raise ValueError(f"Unexpected aggregate format: {s}")
                
                if gv in phi.get('sigma', {}):
                    conditions = phi['sigma'][gv]
                    if not all(eval(cond, {}, row) for cond in conditions):
                        continue  # Skip update if condition not met
        
                if agg == 'count':
                    MF_Struct[search_index][s] += 1

                elif agg == 'sum':
                    MF_Struct[search_index][s] += row[attr]

                elif agg == 'min':
                    MF_Struct[search_index][s] = min(MF_Struct[search_index][s], row[attr])

                elif agg == 'max':
                    MF_Struct[search_index][s] = max(MF_Struct[search_index][s], row[attr])

                elif agg == 'avg':

                    sum_key = f"{gv}_sum_{attr}" if gv else f"sum_{attr}"
                    count_key = f"{gv}_count_{attr}" if gv else f"count_{attr}"

                    if sum_key not in phi['f']:
                        MF_Struct[search_index][sum_key] += row[attr]
                    if count_key not in phi['f']:
                        MF_Struct[search_index][count_key] += 1

                    MF_Struct[search_index][s] = MF_Struct[search_index][sum_key] / MF_Struct[search_index][count_key]

                else:
                    MF_Struct[search_index] = None
    
    #remove any attributes used for calculation and not in select clause
    for entry in MF_Struct:
        for key in list(entry.keys()):
            if key not in phi['s']:
                del entry[key]
    
    
    
    return tabulate.tabulate(MF_Struct,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    