
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv
from helper import inputHandler, createMFStructEntry, lookup
# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    user = os.getenv('DB_USER')
    password = os.getenv('DB_PASSWORD')
    dbname = os.getenv('DB_NAME')

    conn = psycopg2.connect(
    dbname=dbname, user=user, password=password, host="localhost", port=5433, cursor_factory=psycopg2.extras.DictCursor)
    
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    phi = inputHandler()

    MF_Struct = []
    
    
    for row in cur:
        #create a tuple of current rows grouping attribute values
        grouping_key = tuple(row[attr] for attr in phi['v'])

        #search MF_Struct to see if grouping_key already exists
        search_index = lookup(MF_Struct, phi['v'], grouping_key)

        #if does not exist, create an entry in MF_Struct list
        if search_index == -1:
            new_entry = createMFStructEntry(phi, row)
            MF_Struct.append(new_entry)

        #if already exists, update aggregates based on attribute values
        else:
            for s in phi['f']:

                gv, agg, attr = s.split('_')
                if agg == 'count':
                    MF_Struct[search_index][s] += 1
                elif agg == 'sum':
                    MF_Struct[search_index][s] += row[attr]
                elif agg == 'min':
                    MF_Struct[search_index][s] = min(MF_Struct[search_index][attr], row[attr])
                elif agg == 'max':
                    MF_Struct[search_index][s] = max(MF_Struct[search_index][attr], row[attr])
                elif agg == 'avg':
                    MF_Struct[search_index][f"{gv}_sum_{attr}"] += row[attr]
                    MF_Struct[search_index][f"{gv}_count_{attr}"] += 1
                    MF_Struct[search_index][s] = MF_Struct[search_index][f"{gv}_sum_{attr}"] // MF_Struct[search_index][f"{gv}_count_{attr}"]
                else:
                    MF_Struct[search_index] = None

    #TODO: filter based on SUCH THAT CLAUSE AND HAVING CLAUSE

    #remove any attributes used for calculation and not in select clause
    for entry in MF_Struct:
        for key in list(entry.keys()):
            if key not in phi['s']:
                del entry[key]

    
    print(MF_Struct)
    
    
    return tabulate.tabulate(MF_Struct,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    